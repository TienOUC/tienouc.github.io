<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tien</title>
    <description>The truth is what it is,not what you see.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Nov 2019 20:16:25 +0800</pubDate>
    <lastBuildDate>Thu, 07 Nov 2019 20:16:25 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>vue父子组件之间的传值</title>
        <description>&lt;h3 id=&quot;1-父组件向子组件传值&quot;&gt;1. 父组件向子组件传值&lt;/h3&gt;

&lt;h4 id=&quot;-11-第一个就是要明白怎么在父页面中向子组件中传值&quot;&gt;  1.1 第一个就是要明白怎么在父页面中向子组件中传值？&lt;/h4&gt;

&lt;p&gt;你可以给子组件传入一个静态的值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogdk4eofj30gq01ft8i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但我们一般都是需要传动态的值，所以需要v-bind绑定：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogdyto18j30gn038747.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你传的值可以是数字、对象、数组等等，参见vue官网。&lt;/p&gt;

&lt;h4 id=&quot;-12-第二个就是要知道如何在子组件中接受父页面传过来的值有几点需要了解&quot;&gt;  1.2 第二个就是要知道如何在子组件中接受父页面传过来的值，有几点需要了解：&lt;/h4&gt;

&lt;p&gt;组件实例的作用域是孤立的；&lt;/p&gt;

&lt;p&gt;子组件要显式的用props选项声明它预期的数据，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 某个子组件中：
export default {
  props: {
    title: {
      type: String,
      default: 'hello world'
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以在页面中使用了，具体我们在项目中体现。&lt;/p&gt;

&lt;p&gt;以上就是单向数据流的一般表现了： &lt;strong&gt;父级 prop 的更新会向下流动到子组件中，但是反过来则不行。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-子组件向父组件传值&quot;&gt;2. 子组件向父组件传值&lt;/h3&gt;

&lt;p&gt;那么我们延伸一下，子组件怎么向父组件传值？&lt;/p&gt;

&lt;h4 id=&quot;-21-基本概念&quot;&gt;  2.1 基本概念&lt;/h4&gt;

&lt;p&gt;在Vue中，父子组件的关系可以总结为&lt;code class=&quot;highlighter-rouge&quot;&gt;prop&lt;/code&gt;向下传递，事件向上传递。父组件通过&lt;code class=&quot;highlighter-rouge&quot;&gt;prop&lt;/code&gt;给子组件下发数据，子组件通过&lt;code class=&quot;highlighter-rouge&quot;&gt;事件&lt;/code&gt;给父组件发送信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogedzh3aj306u06smx0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;props down , events up
每个Vue实例都实现了事件接口：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$on(evntName)&lt;/code&gt;监听事件；使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$emit(eventName,optionalPayload)&lt;/code&gt;触发事件。另外，父组件可以在使用子组件的地方直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt;来监听子组件触发的事件。&lt;/p&gt;

&lt;h4 id=&quot;-22-举例说明&quot;&gt;  2.2 举例说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;父组件在组件上定义了一个自定义事件&lt;code class=&quot;highlighter-rouge&quot;&gt;childFn&lt;/code&gt;，事件名为&lt;code class=&quot;highlighter-rouge&quot;&gt;parentFn&lt;/code&gt;用于接受子组件传过来的&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 父组件 --&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;div class=&quot;test&quot;&amp;gt;
      &amp;lt;test-com @childFn=&quot;parentFn&quot;&amp;gt;&amp;lt;/test-com&amp;gt;
      &amp;lt;br/&amp;gt; 
      子组件传来的值 : 
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
    // ...
    data: {
        message: ''
    },
    methods: {
       parentFn(payload) {
        this.message = payload;
      }
    }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;子组件是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;buttton&lt;/code&gt;按钮，并为其添加了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt;事件，当点击的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$emit()&lt;/code&gt;触发事件，把&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;传给父组件。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 子组件 --&amp;gt;
&amp;lt;template&amp;gt; 
&amp;lt;div class=&quot;testCom&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&amp;gt;
    &amp;lt;button @click=&quot;click&quot;&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
    // ...
    data() {
        return {
          // 默认
          message: '我是来自子组件的消息'
        }
    },
    methods: {
      click() {
            this.$emit('childFn', this.message);
        }
    }    
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就基本实现了子组件向父组件发送值了。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Nov 2019 17:28:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</guid>
        
        <category>WEB/Framework</category>
        
        
      </item>
    
      <item>
        <title>create-react-app部署项目到Github Pages</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://willtien.com/Account-app/&quot;&gt;账单薄项目预览&lt;/a&gt; &lt;br /&gt;
mockAPI: &lt;a href=&quot;https://5db85da7177b350014ac796d.mockapi.io/api/v1/records&quot;&gt;API endpoint&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-创建项目&quot;&gt;&lt;strong&gt;1. 创建项目&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;使用 create-react-app 脚手架创建项目&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install create-react-app 
npm create-react-app my-app
cd my-app
npm start  // 运行

npm run eject //解压默认webpack包，操作不可逆
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-将本地的文件-push-至远端仓库&quot;&gt;&lt;strong&gt;2. 将本地的文件 push 至远端仓库&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init         // 初始化一个文件夹为本地仓库
git status    // 查看状态和是否存在.git文件
git add .      // 添加到暂存区
git commit -m '提交'            // 提交到版本库且增添提交备注
git remote add origin {url}   // {url} 是你的GitHub上reponsitory地址
git push -u origin master     // 将代码推送到GitHub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-github-pages-部署&quot;&gt;&lt;strong&gt;3. Github Pages 部署&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;把项目部署成GitHub pages，在GitHub上点开项目到设置，翻到Github Pages设置处，可以看到GitHub Pages只能使用master、gh-pages分支或者master下面的docs文件夹。
这里使用的是gh-pages分支的方式来创建&lt;/p&gt;

&lt;h4 id=&quot;4-安装-gh-pages&quot;&gt;&lt;strong&gt;4. 安装 gh-pages&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install gh-pages --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 gh-pages 中间件，可以把 build 文件下的文件推送到 GitHub，并且创建 gh-pages branch&lt;/p&gt;

&lt;h4 id=&quot;5-修改-packagejson&quot;&gt;&lt;strong&gt;5. 修改 package.json&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;react_demo&quot;,
    &quot;version&quot;: &quot;1.1.0&quot;,
    &quot;private&quot;: true,
  + &quot;homepage&quot;: &quot;./&quot;,  // 表示你访问的页面
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意：homepage 不要设置成 github page上生成的那个链接路径，比如https://username.github.io/react_demo/。如果设置成上面的连接，build打的包会这所有路径前面加上react_demo。比如 index.html 文件中对同等目录下的文件引用应该是 src=’./index.css’，结果会变成src=’./react_demo/index.css’，这样部署后肯定无法访问，所有资源都找不到。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;增加npm scripts命令，推送gh-pages&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
        ...
  + &quot;predeploy&quot;: &quot;npm run build&quot; , // 将你的项目预编译成静态文件放在build文件夹
  + &quot;deploy&quot;: &quot;gh-pages -d build&quot;  // 是使用gh-pages 部署你的build文件夹下的内容
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意修改之后注意也 push 上去&lt;/p&gt;
&lt;h4 id=&quot;6-推送项目&quot;&gt;&lt;strong&gt;6. 推送项目&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;GitHub Pages只是部署项目，react代码直接放上去是识别不了的，所以部署的是打包编译后到代码&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Webpack 4.X打包Bootstrap4.x失败解决办法&lt;/strong&gt;&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install jquery --save // Bootstrap4.x 依赖JQuery，所以需要先安装JQuery
npm install popper.js --save // Bootstrap4.x 依赖Popper，所以需要先安装Popper
npm install bootstrap --save // 安装Bootstrap4.x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译后就可以推送了,执行上面配置的命令。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这时github上项目就多出了一个gh-pages的branch，在设置中Github Pages处选择gh-pages分支保存，部署完成。
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8hni5w4moj30kf0gm0t6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部署时候具体执行的操作大概为：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;按照 package.json 里面增加配置代码&lt;/li&gt;
  &lt;li&gt;build 打包编译代码文件&lt;/li&gt;
  &lt;li&gt;使用 gh-pages 工具把 build 文件下的文件推送到 GitHub部署到新的gh-pages分支上&lt;/li&gt;
  &lt;li&gt;发布页面&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 30 Oct 2019 01:00:06 +0800</pubDate>
        <link>http://localhost:4000/2019/10/create-react-app%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Github-Pages/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/create-react-app%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Github-Pages/</guid>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>TCP和UDP的简单理解</title>
        <description>&lt;h4 id=&quot;1-tcp-和-udp-的区别&quot;&gt;1. TCP 和 UDP 的区别&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TCP 是面向连接的，UDP 是面向无连接的&lt;/li&gt;
  &lt;li&gt;UDP程序结构较简单&lt;/li&gt;
  &lt;li&gt;TCP 是面向字节流的，UDP 是基于数据报的&lt;/li&gt;
  &lt;li&gt;TCP 保证数据正确性，UDP 可能丢包&lt;/li&gt;
  &lt;li&gt;TCP 保证数据顺序，UDP 不保证&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-什么是面向连接什么是面向无连接&quot;&gt;2. 什么是面向连接，什么是面向无连接?&lt;/h4&gt;

&lt;p&gt;在互通之前，面向连接的协议会先建立连接，如 TCP 有三次握手，而 UDP 不会&lt;/p&gt;

&lt;h4 id=&quot;3-tcp三次握手&quot;&gt;3. TCP三次握手?&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.客户端发起请求（寻址请求） &lt;br /&gt;
2.服务端收到请求，然后回应请求（确认请求） &lt;br /&gt;
3.客户端收到服务端的回应报文并对服务端作出回应（连接请求）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;简单理解：A代表客户端，B代表服务端
A: 你好，我是A
B: 你好，我是B
A: 你好B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-tcp四次挥手&quot;&gt;4. TCP四次挥手?&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.数据验证请求码 &lt;br /&gt;
2.传输结束标记 &lt;br /&gt;
3.确认结束标记 &lt;br /&gt;
4.连接断开标记&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A：B 啊，我不想玩了
B：哦，你不想玩了啊，我知道了【 这个时候，只是 A 不想玩了，即不再发送数据，但是 B 可能还有未发送完的数据，所以需要等待 B 也主动关闭。】
B：A 啊，结束了，我也不玩了，拜拜
A：好的，拜拜
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5-tcp-为什么是可靠连接&quot;&gt;5. TCP 为什么是可靠连接?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过 TCP 连接传输的数据无差错，不丢失，不重复，且按顺序到达；&lt;/li&gt;
  &lt;li&gt;TCP 报文头里面的序号能使 TCP 的数据按序到达；&lt;/li&gt;
  &lt;li&gt;报文头里面的确认序号能保证不丢包，累计确认及超时重传机制；&lt;/li&gt;
  &lt;li&gt;TCP 拥有流量控制及拥塞控制的机制；&lt;/li&gt;
  &lt;li&gt;TCP 的顺序问题，丢包问题，流量控制都是通过滑动窗口来解决的；&lt;/li&gt;
  &lt;li&gt;拥塞控制时通过拥塞窗口来解决的。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;UDP报文结构:
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g88cm2eqlvj30sw07yjr9.jpg&quot; alt=&quot;UDP报文结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TCP报文结构:
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g88cm20bzaj30rs0d9jri.jpg&quot; alt=&quot;TCP报文结构&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Oct 2019 01:00:06 +0800</pubDate>
        <link>http://localhost:4000/2019/10/TCP%E5%92%8CUDP%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/TCP%E5%92%8CUDP%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
        
        <category>WEB</category>
        
        
      </item>
    
      <item>
        <title>隐式类型转换的妙用</title>
        <description>&lt;h4 id=&quot;可变数组求和举例&quot;&gt;可变数组求和举例&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(...a){
var sum = 0
a.forEach((item) =&amp;gt; {
    sum += item  
})
return sum 
}
console.log(foo(1,2,3,'4',11))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Running] node &quot;Untitled-1.js&quot;
6411
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(...a){
var sum = 0
a.forEach((item) =&amp;gt; {
    sum += item * 1   // *1 隐式类型转换,把'4' 转换成4
})
return sum 
}
console.log(foo(1,2,3,'4',11))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Running] node &quot;Untitled-1.js&quot;
21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Oct 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A6%99%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A6%99%E7%94%A8/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>跨域及几种解决方法</title>
        <description>&lt;h4 id=&quot;一-什么是跨域&quot;&gt;一、 &lt;strong&gt;什么是跨域&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。&lt;/p&gt;

&lt;p&gt;例如：a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。注意：跨域限制访问，其实是浏览器的限制。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;二-解决跨域的几种方法&quot;&gt;二、 &lt;strong&gt;解决跨域的几种方法&lt;/strong&gt;&lt;/h4&gt;

&lt;h5 id=&quot;21-jsonp&quot;&gt;2.1 JSONP&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt; 动态创建一个script标签，动态加载一个js文件，载入成功之后会执行在url参数中指定的函数，并且把需要的json数据所谓参数传入。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;只能传递get请求，有一定的限制&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 原生方法
(function (window,document) {
    &quot;use strict&quot;;
    var jsonp = function (url,data,callback) {

        // 1.将传入的data数据转化为url字符串形式
        // {id:1,name:'zhangsan'} =&amp;gt; id=1&amp;amp;name=zhangsan
        var dataString = url.indexof('?') == -1? '?': '&amp;amp;';
        for(var key in data){
            dataString += key + '=' + data[key] + '&amp;amp;';
        };

        // 2 处理url中的回调函数
        // cbFuncName回调函数的名字 ：my_json_cb_名字的前缀 + 随机数（把小数点去掉）
        var cbFuncName = 'my_json_cb_' + Math.random().toString().replace('.','');
        dataString += 'callback=' + cbFuncName;

        // 3.创建一个script标签并插入到页面中
        var scriptEle = document.createElement('script');
        scriptEle.src = url + dataString;

        // 4.挂载回调函数
        window[cbFuncName] = function (data) {
            callback(data);
            // 处理完回调函数的数据之后，删除jsonp的script标签
            document.body.removeChild(scriptEle);
        }

        // 5.append到页面中
        document.body.appendChild(scriptEle);
    }

    // 因为jsonp是一个私有函数外部不能调用，所有jsonp函数作为window对象的一个方法，供外部调用
    window.$jsonp = jsonp;

})(window,document)

// 原生方式精简版
&amp;lt;script&amp;gt;
    var script = document.createElement('script');
    script.type = 'text/javascript';
 
    // 传参并指定回调执行函数为onBack
    script.src = 'http://www.baidu.com/xx?a=b&amp;amp;callback=onBack';
    document.head.appendChild(script);
 
    // 回调执行函数
    function onBack(res) {
        alert(JSON.stringify(res));
    }
&amp;lt;/script&amp;gt;


// jQuery
$.ajax({
    url: url,
    type: 'get',
    dataType: 'jsonp',  // 请求方式为jsonp
    jsonpCallback: &quot;callback&quot;,    // 自定义回调函数名
    data: {}
});

// 后端node.js代码
var querystring = require('querystring');
var http = require('http');
var server = http.createServer();
 
server.on('request', function(req, res) {
    var params = qs.parse(req.url.split('?')[1]);
    var fn = params.callback;
 
    // jsonp返回设置
    res.writeHead(200, { 'Content-Type': 'text/javascript' });
    res.write(fn + '(' + JSON.stringify(params) + ')');
 
    res.end();
});
 
server.listen('8080');
console.log('Server is running at port 8080...');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;22-cros跨域资源共享&quot;&gt;2.2 CROS跨域资源共享&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt; 服务器端对于cros的支持，设置Access-Control-Allow-Origin为你传输的origin的值，浏览器监测到响应的设置，支持跨域&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;跨域携带cookies&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;优缺点：支持所有的请求类型，get、post、put、delete、updata等等&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 原生
...
xhr.withCredentials = true
...

// jQuery
$.ajax({
    ...
   xhrFields: {
       withCredentials: true    // 前端设置是否带cookie
   },
   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie
    ...
});

// axios
axios.defaults.withCredentials=true; // 让ajax携带cookie

//服务端设置
const app = express()
app.all('*', function(req, res, next) {
  res.header('Access-Control-Allow-Origin', '*') // 访问控制允许来源：所有
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept') // 访问控制允许报头 X-Requested-With: xhr请求
  res.header('Access-Control-Allow-Metheds', 'PUT, POST, GET, DELETE, OPTIONS') // 访问控制允许方法
  res.header('X-Powered-By', 'nodejs') // 自定义头信息，表示服务端用nodejs
  res.header('Content-Type', 'application/json;charset=utf-8')
  res.header('Access-Control-Max-Age', '600')
  next()
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;23-windowname--iframe跨域&quot;&gt;2.3 window.name + iframe跨域&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt; 一般用于iframe的跨域问题，在一个窗口（window）的生命周期内，窗口载入的所有的页面都是共享一个window.name的，每个页面的window.name都有读写的权限，并且是持久存在一个再如果的所有页面中&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;&lt;em&gt;优缺点：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。window.name支持非常长的name值(2MB)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 在A页面设置函数

var proxy = function(url, callback) {
    var state = 0;
    var iframe = document.createElement('iframe');
 
    // 加载跨域页面
    iframe.src = url;
 
    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name
    iframe.onload = function() {
        if (state === 1) {
            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据
            callback(iframe.contentWindow.name);
            destoryFrame();
 
        } else if (state === 0) {
            // 第1次onload(跨域页)成功后，切换到同域代理页面
            iframe.contentWindow.location = 'http://www.domain1.com/proxy.html';
            state = 1;
        }
    };
 
    document.body.appendChild(iframe);
 
    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）
    function destoryFrame() {
        iframe.contentWindow.document.write('');
        iframe.contentWindow.close();
        document.body.removeChild(iframe);
    }
};
 
// 请求跨域b页面数据
proxy('http://www.xxx.com/B.html', function(data){
    alert(data);
});


// 在B页面设置window.name值
&amp;lt;script&amp;gt;
    window.name = 'B页面向A页面传递的数据';
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;24-h5属性-windowpostmessage&quot;&gt;2.4 H5属性 window.postMessage&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt; postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;页面和其打开的新窗口的数据传递&lt;/li&gt;
    &lt;li&gt;多窗口之间消息传递&lt;/li&gt;
    &lt;li&gt;页面与嵌套的iframe消息传递&lt;/li&gt;
    &lt;li&gt;上面三个场景的跨域数据传递&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;用法：postMessage(data,origin)方法接受两个参数
data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。
origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/”。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // A页面 
&amp;lt;iframe id=&quot;iframe&quot; src=&quot;http://www.B.com/b.html&quot; style=&quot;display:none;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;script&amp;gt;      
    var iframe = document.getElementById('iframe');
    iframe.onload = function() {
        var data = {
            msg: 'xxx'
        };
        // 向B传送跨域数据
        iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.B.com');
    };
 
    // 接受B返回数据
    window.addEventListener('message', function(e) {
        alert('data from B ---&amp;gt; ' + e.data);
    }, false);
&amp;lt;/script&amp;gt;


// B页面
&amp;lt;script&amp;gt;
    // 接收A的数据
    window.addEventListener('message', function(e) {
        alert('data from A ---&amp;gt; ' + e.data);
 
        var data = JSON.parse(e.data);
        if (data) {
            data.number = 16;
 
            // 处理后再发回A
            window.parent.postMessage(JSON.stringify(data), 'http://www.A.com');
        }
    }, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;21-nodejs中间件代理跨域&quot;&gt;2.1 nodejs中间件代理跨域&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt; node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发&lt;/p&gt;

&lt;p&gt;node + vue + webpack-dev-server代理接口跨域，在开发模式下，只需要配置devServer=&amp;gt;proxy即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
    entry: {},
    module: {},
    ...
    devServer: {
        historyApiFallback: true,
        proxy: [{
            target: 'http://www.B.com:8080',  // 代理跨域目标接口
            changeOrigin: true,
            cookieDomainRewrite: 'www.A.com'  // 可以为false，表示不修改
        }],
        noInfo: true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在非框架类时nodejs使用http-proxy-middleware&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require('express');
var proxy = require('http-proxy-middleware');
var app = express();
 
app.use('/', proxy({
    // 代理跨域目标接口
    target: 'http://www.B.com:8080',
    changeOrigin: true,
 
    // 修改响应头信息，实现跨域并允许带cookie
    onProxyRes: function(proxyRes, req, res) {
        res.header('Access-Control-Allow-Origin', 'http://www.A.com');
        res.header('Access-Control-Allow-Credentials', 'true');
    },
 
    // 修改响应信息中的cookie域名
    cookieDomainRewrite: 'www.A.com'  // 可以为false，表示不修改
}));
 
app.listen(5566);
console.log('Proxy server is listen at port 5566...');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;nodejs如何设置允许跨域&quot;&gt;Node.js如何设置允许跨域&lt;/h3&gt;

&lt;h4 id=&quot;1-设置允许所有域名跨域&quot;&gt;1. 设置允许所有域名跨域：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.all(&quot;*&quot;,function(req,res,next){
    //设置允许跨域的域名，*代表允许任意域名跨域
    res.header(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;);
    //允许的header类型
    res.header(&quot;Access-Control-Allow-Headers&quot;,&quot;content-type&quot;);
    //跨域允许的请求方式 
    res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;DELETE,PUT,POST,GET,OPTIONS&quot;);
    if (req.method.toLowerCase() == 'options')
        res.send(200);  //让options尝试请求快速结束
    else
        next();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-设置允许指定域名httpwwwabccom跨域&quot;&gt;2. 设置允许指定域名“http://www.ABC.com”跨域：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.all(&quot;*&quot;,function(req,res,next){
    //设置允许跨域的域名，*代表允许任意域名跨域
    res.header(&quot;Access-Control-Allow-Origin&quot;,&quot;http://www.ABC.com&quot;);
    //允许的header类型
    res.header(&quot;Access-Control-Allow-Headers&quot;,&quot;content-type&quot;);
    //跨域允许的请求方式 
    res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;DELETE,PUT,POST,GET,OPTIONS&quot;);
    if (req.method.toLowerCase() == 'options')
        res.send(200);  //让options尝试请求快速结束
    else
        next();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-设置允许多个域名跨域&quot;&gt;3. 设置允许多个域名跨域：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.all(&quot;*&quot;,function(req,res,next){
    if( req.headers.origin.toLowerCase() == &quot;http://www.ABC.com&quot;
        || req.headers.origin.toLowerCase() ==&quot;http://127.0.0.1&quot; ) {
        //设置允许跨域的域名，*代表允许任意域名跨域
        res.header(&quot;Access-Control-Allow-Origin&quot;, req.headers.origin);
    }
    //允许的header类型
    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);
    //跨域允许的请求方式 
    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;DELETE,PUT,POST,GET,OPTIONS&quot;);
    if (req.method.toLowerCase() == 'options')
        res.send(200);  //让options尝试请求快速结束
    else
        next();    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-如果允许的域名较多可以将允许跨域的域名放到数组当中&quot;&gt;4. 如果允许的域名较多，可以将允许跨域的域名放到数组当中：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.all(&quot;*&quot;,function(req,res,next){
    var orginList=[
        &quot;http://www.ABC.com&quot;,
        &quot;http://www.alibaba.com&quot;,
        &quot;http://www.qq.com&quot;,
        &quot;http://www.baidu.com&quot;
    ]
    if(orginList.includes(req.headers.origin.toLowerCase())){
        //设置允许跨域的域名，*代表允许任意域名跨域
        res.header(&quot;Access-Control-Allow-Origin&quot;,req.headers.origin);
    }
    //允许的header类型
    res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;content-type&quot;);
    //跨域允许的请求方式
    res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;DELETE,PUT,POST,GET,OPTIONS&quot;);
    if (req.method.toLowerCase() == 'options')
        res.send(200);  //让options尝试请求快速结束
    else
        next();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%87%A0%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
        
        <category>NodeJS</category>
        
        
      </item>
    
      <item>
        <title>MogoDB(MacOS)</title>
        <description>&lt;h4 id=&quot;一安装&quot;&gt;&lt;strong&gt;一、安装&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;主要有如下三种安装方式，本文主要介绍对入门友好的第三种方式 &lt;br /&gt;
+（1）手动命令安装 &lt;br /&gt;
+（2）采用Homebrew &lt;br /&gt;
+（3）下载安装包。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot;&gt;MongoDB Download&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将解压后的文件放入 /usr/local ，默认情况下在Finder中是看不到 /usr 这个目录的（终端用得溜的请略过），可以打开Finder后按 shift + command +G 输入 /usr/local 后回车便能看到这个隐藏的目录了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置环境变量，打开终端，输入“open -e .bash_profile”，在打开的文件中加入。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=${PATH}:/usr/local/MongoDB/bin&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用Command+S保存配置，关闭上面的.bash_profile编辑窗口，然后在下图中输入”source .bash_profile”使配置生效。输入”mongod -version”，回车后如果看到下面的版本号则说明MongoDB已经成功安装到了Mac上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在根目录下新建 data 文件夹，里面再建一个 db 文件夹，安装MongoDB时并不会自动生成，需要我们手动创建，可以在命令行输入创建，也可以直接在Finder中手动新建。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;如遇到找不到data/db的问题，&lt;code class=&quot;highlighter-rouge&quot;&gt;   sudo mkdir -p /data/db &lt;/code&gt; 创建路径即可，或者直接自定义路径&lt;code class=&quot;highlighter-rouge&quot;&gt;  mongod --dbpath /usr/local/mongoDB/data/db   &lt;/code&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;二运行&quot;&gt;&lt;strong&gt;二、运行&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;打开命令行输入&lt;code class=&quot;highlighter-rouge&quot;&gt;   mongod&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;显示等候客户端连接的界面就代表启动成功了，如果不成功就检查下 /data/db 文件夹位置对不对，不行就重新删掉建一个， 打开浏览器，输入localhost:27017 ，会出现这样一行文字。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;It looks like you are trying to access MongoDB over HTTP on the native driver port.&lt;/code&gt;      打开新的terminal，输入  &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo&lt;/code&gt;    &lt;br /&gt;
可以对数据库进行操作，要停止MongoDB的时候一定要正确的退出，不然下次再次连接数据库会出现问题，使用下面的两行代码可以完成这一操作。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use admin;
db.shutdownServer();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;三可视化工具&quot;&gt;&lt;strong&gt;三、可视化工具&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Robot 3T是一个跨平台的MongoDB GUI客户端管理工具，支持Windows、MacOS、Linux。其特点是支持到MongoDB服务器的SSL连接，还支持使用SSH隧道连接。RoboMongo的查询界面同时支持树视图、表格视图、文本视图三种，也可以保存查询结果供以后使用。可以选择适合自己的版本下载。
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tjg6wbn0j312c0lndh7.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tjg6nfoej31290lnq3i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;四简单应用&quot;&gt;&lt;strong&gt;四、简单应用&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;数据库插入&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/users', {useNewUrlParser: true,useUnifiedTopology: true})

var app = mongoose.connection;
app.on('error', console.error.bind(console, 'connection error:'))
app.once('open', function () {
    console.log('app is ok!')
})

//获取Schema对象
var usersSchema = new mongoose.Schema({
    us: {type: String, required: true},
    ps: {type: String, required: true},
    age: Number,
    sex: {type: Number, default: 0}
});

//将schema对象转换为数据模型
var User = mongoose.model('users', usersSchema)

//数据库--插入
User.insertMany({us:'Tien', ps:'123', age:18})
.then((data)=&amp;gt;{
    console.log(data)
    console.log('插入成功!')
})
.catch((err)=&amp;gt;{
    console.log('插入失败!')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tjtym2pyj30wy0bu74d.jpg&quot; alt=&quot;数据库插入 4-1&quot; /&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tjtyu6s0j31oi0fot9i.jpg&quot; alt=&quot;数据库插入 4-2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据库删除&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/users', {useNewUrlParser: true,useUnifiedTopology: true})

var app = mongoose.connection;
app.on('error', console.error.bind(console, 'connection error:'))
app.once('open', function () {
    console.log('app is ok!')
})

//获取Schema对象
var usersSchema = new mongoose.Schema({
    us: {type: String, required: true},
    ps: {type: String, required: true},
    age: Number,
    sex: {type: Number, default: 0}
});

//将schema对象转换为数据模型
var User = mongoose.model('users', usersSchema)

//数据库--删除
User.remove()
.then((data)=&amp;gt;{
    console.log('delete done!');
})
.catch((err)=&amp;gt;{
    console.log('删除失败！')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tk0ufb45j30x00byaa1.jpg&quot; alt=&quot;数据库删除数据 4-3&quot; /&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tk0ungbgj31ok0gs3zd.jpg&quot; alt=&quot;数据库删除数据 4-4&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据库查询&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/users', {useNewUrlParser: true,useUnifiedTopology: true})

var app = mongoose.connection;
app.on('error', console.error.bind(console, 'connection error:'))
app.once('open', function () {
    console.log('app is ok!')
})

//获取Schema对象
var usersSchema = new mongoose.Schema({
    us: {type: String, required: true},
    ps: {type: String, required: true},
    age: Number,
    sex: {type: Number, default: 0}
});

//将schema对象转换为数据模型
var User = mongoose.model('users', usersSchema)

//数据库--查询
User.find({age:18})
.then((data)=&amp;gt;{
    console.log(data)
    console.log('查询成功！')
})
.catch((err)=&amp;gt;{
    console.log('查询失败！')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g7tk7nm5ruj30wz0c2jrh.jpg&quot; alt=&quot;数据库查询 4-5&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Oct 2019 19:45:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/MogoDB/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/MogoDB/</guid>
        
        <category>NodeJS</category>
        
        
      </item>
    
      <item>
        <title>Js一元运算-数据类型转换</title>
        <description>&lt;p&gt;今天碰到个下面这段代码中  ` =+ ` 一时半会儿不得其解，上&lt;a href=&quot;https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which&quot;&gt;stack overflow&lt;/a&gt;  查了一下才知道这个是日常比较少见的数据类型转换用法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(dx, dy){
            rect.attr({x: orig_x+dx,y: orig_y+dy, fill:&quot;orange&quot;});
        },function(x,y){
            orig_x=+rect.attr(&quot;x&quot;);
            orig_y=+rect.attr(&quot;y&quot;);
            rect.attr({fill:&quot;orange&quot;});
        },function(){
            rect.attr({fill:&quot;blue&quot;});
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这称之为正号(+)或是一元正号(unary plus)，而不是加号(+)，因为参与的运算子只会有一个，所以称为一元。&lt;/p&gt;

&lt;p&gt;简单的来说，它是一种把其他类型的资料转为数字类型的语法，可以不限于字符串。建议只用在单纯的数字字符串上。&lt;/p&gt;

&lt;p&gt;这种语法是从使用社群上发展出来的，教科书上很少会提及。这种语法有很多种，下面有张图里有6种是我从&lt;a href=&quot;https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which&quot;&gt;这篇问答&lt;/a&gt;找来的，它是用&lt;a href=&quot;http://jsfiddle.net/EpUBN/8/&quot;&gt;代码产生&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image-static.segmentfault.com/178/037/1780371411-5824716d2aa3b&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看图中就大概知道，一元正号(+)的行为类似于parseFloat，而不是parseInt，相似于parseInt的是双波折号(~~)的语法。&lt;/p&gt;

&lt;p&gt;一元正号(+)可以把像”123.456”的字符串，转换为数字类型的123.456。会使用一元正号(+)，而不用parseFloat其实是有原因的，大致上简单说明一下:&lt;/p&gt;

&lt;h4 id=&quot;1-快&quot;&gt;1. 快&lt;/h4&gt;
&lt;p&gt;这种语法会被使用的主要原因，是经过测试过在某些浏览器与情况下它的效率超快。&lt;/p&gt;

&lt;h4 id=&quot;2-语法简单&quot;&gt;2. 语法简单&lt;/h4&gt;
&lt;p&gt;打个正号(+)比打parseFloat或parseInt够简单了。&lt;/p&gt;

&lt;h4 id=&quot;3-某些特殊转置情况下使用&quot;&gt;3. 某些特殊转置情况下使用&lt;/h4&gt;
&lt;p&gt;例如以下几个，有些开发者会用这些转置的结果，但建议你除非很确定要什么结果再使用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a.空字符串/null/false: +’‘得出0数字，但用parseFloat或parseInt会得出NaN。 &lt;br /&gt;
b.科学记号: +’2e3’得2000，与parseFloat一致，parseInt会得出2。 &lt;br /&gt;
c.16进位: +’0xf’得15，parseFloat得0，parseInt会得出15。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其他的语法还有很多，例如1*‘123.456’或-(-‘123.456’)之类的, 总之这种就很少见, 也很少人在用了。&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Sep 2019 03:15:00 +0800</pubDate>
        <link>http://localhost:4000/2019/09/Js%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/Js%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>gitignore忽略不必要文件</title>
        <description>&lt;p&gt;&lt;strong&gt;忽略文件的原则是：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;忽略操作系统自动生成的文件，比如缩略图等；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;1-先在项目路径下添加gitignore文件&quot;&gt;1. 先在项目路径下添加.gitignore文件。&lt;/h4&gt;
&lt;h4 id=&quot;2-编辑gitignore文件其实就是输入一些相对路径或者通配符来避免文件提交&quot;&gt;2. 编辑.gitignore文件，其实就是输入一些相对路径或者通配符来避免文件提交。&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.DS_Store
.idea
vendor/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 查看，可以看出排除了的文件，避免了其提交。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-github-desktop-中添加&quot;&gt;3. Github DeskTop 中添加&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g6zf27vt98j30gl07274e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g6zf27luccj30fp0c83ym.jpg&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 15 Sep 2019 06:16:01 +0800</pubDate>
        <link>http://localhost:4000/2019/09/gitignore%E5%BF%BD%E7%95%A5%E4%B8%8D%E5%BF%85%E8%A6%81%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/gitignore%E5%BF%BD%E7%95%A5%E4%B8%8D%E5%BF%85%E8%A6%81%E6%96%87%E4%BB%B6/</guid>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>Webpack笔记</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;网易云免费课程-&lt;a href=&quot;https://study.163.com/courses-search?keyword=Webpack打包工具用法&quot;&gt;Webpack打包工具用法&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;在网易云课堂初学webpack3.0用法，在实践过程中发现4.0版本变动较大，暂先转载该篇优秀博文并结合官方文档以做后续学习参考，原博文链接见文末。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;全局安装webpack&quot;&gt;&lt;strong&gt;全局安装webpack&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install webpack webpack-cli -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;全局安装webpack会有个问题，就是当你有两个项目依赖于不同版本的webpack，就会有一个项目打包不了，所以还是不全局安装webpack比较好。&lt;/p&gt;

&lt;h3 id=&quot;在当前项目安装webpack&quot;&gt;&lt;strong&gt;在当前项目安装webpack&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;新建webpack-demo目录，然后进行npm项目初始化 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init 或者 npm init -y&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在刚创建出来的package.json中添加private字段 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;private&quot;: true    /**表示私有的**/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果webpack已经全局安装，需要卸载 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm uninstall webpack webpack-cli -g  /**卸载全局安装的webpack**/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下执行安装命令 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install webpack webpack-cli --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用npx打印出当前的webpack版本 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npx webpack -v&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;安装指定版本的webpack&quot;&gt;&lt;strong&gt;安装指定版本的webpack&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm info webpack /*查看webpack所有版本信息*/
npm install webpace@4.29.6 --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;webpack的配置文件&quot;&gt;&lt;strong&gt;webpack的配置文件&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;在项目根目录新建文件webpack.config.js&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./index.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundle.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;webpack手动打包命令&quot;&gt;&lt;strong&gt;webpack手动打包命令&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; npx webpack /**默认会使用根目录下的webpack.config.js配置文件进行打包**/
npx webpack --config webpack.config.js /**指定配置文件打包**/
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用npm-scripts-简化webpack命令&quot;&gt;&lt;strong&gt;使用npm scripts 简化webpack命令&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;在package.json中的scripts字段下添加bundle字段&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;bundle&quot;: &quot;webpack&quot;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用npm命令打包&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run bundle&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用file-loader打包图片&quot;&gt;&lt;strong&gt;使用file-loader打包图片&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;安装file-loader&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install file-loader --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在配置文件webpack.config.js中添加字段&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;jpg|png|svg|gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;           
                &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'file-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name].[ext]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**原名字输出**/&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;outputPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'images/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**打包后存放图片的文件夹**/&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用url-loader打包图片&quot;&gt;&lt;strong&gt;使用url-loader打包图片&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装url-loader
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install url-loader --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在配置文件webpack.config.js中添加字段&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;jpg|png|svg|gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'url-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[name].[ext]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;outputPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'images/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
                 &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;204800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**小于20kb的图片，打包成base64放到bundle.js文件**/&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用style-loader和css-loader打包css文件&quot;&gt;&lt;strong&gt;使用style-loader和css-loader打包css文件&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装style-loader 和 css-loader
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install style-loader css-loader --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在webpack.config.js文件中添加配置&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;css$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用sass-loader打包sass文件&quot;&gt;&lt;strong&gt;使用sass-loader打包.sass文件&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装sass-loader 和 node-sass
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install sass-loader node-sass --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在webpack.config.js文件中添加配置&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;sass$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sass-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;数组形式的loader是从下到上，从右到左执行 sass-loader -&amp;gt; css-loader -&amp;gt; style-loader&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用postcss-loader自动添加css厂商前缀&quot;&gt;&lt;strong&gt;使用postcss-loader自动添加css厂商前缀&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装postcss-loader
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install postcss-loader --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;postcss-loader需要配合autoprefixer插件使用
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install autoprefixer --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在项目根目录添加postcss.config.js文件
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'autoprefixer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在webpack.config.js中添加配置
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;scss$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sass-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'postcss-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;确保所有的scss文件都会被所有loader处理,修改webpack.config.js中的配置
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;scss$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;s1&quot;&gt;'style-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'css-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;cm&quot;&gt;/**确保每个scss都被所有loader处理**/&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;importLoaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;cm&quot;&gt;/**分模块打包css**/&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;'sass-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;'postcss-loader'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;使用file-loader打包字体文件&quot;&gt;&lt;strong&gt;使用file-loader打包字体文件&lt;/strong&gt;&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装file-loader
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install file-loader --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在webpack.config.js文件中添加modules
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;eot|ttf|svg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nl&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'file-loader'&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用插件使webpack打包更便捷&quot;&gt;&lt;strong&gt;使用插件使webpack打包更便捷&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装自动生成index.html插件 html-webpack-plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;安装html-webpack-plugin
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install html-webpack-plugin --save-dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;htmlWebpackPlugin 会在打包结束后，自动生成index.html文件，并把对应的js引入index.htm文件中&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在webpack.config.js中引入插件
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'html-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'src/index.html'&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**自动以src/index.html为模板，在dist目录下生成新的index.html文件**/&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;使用clean-webpacl-plugin插件自动删除dist插件再打包&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装插件clean-webpack-plugin
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install clean-webpack-plugin --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在webpack.config.js中使用插件&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CleanWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clean-webpack-plugin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CleanWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})]&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**默认清除的是dist目录**/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sourcemap配置&quot;&gt;&lt;strong&gt;sourceMap配置&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;sourceMap 映射src目录的源文件，能定位到哪行报错&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;开启sourceMap,在wepback.config.js中添加配置
&lt;code class=&quot;highlighter-rouge&quot;&gt;devtool: 'source-map'&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sourceMap的最佳实现
```js
devtool: ‘cheap-module-eval-source-map’ /&lt;strong&gt;开发环境中使用&lt;/strong&gt;/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;devtool: ‘cheap-module-source-map’ /&lt;strong&gt;生产环境&lt;/strong&gt;/&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **使用WebpackDevServer提高开发效率**

1. 安装webpack-dev-server
`npm install webpack-dev-server --save-dev`

2. 在webpack.config.js中配置devServer
```js
devServer: {
    contentBase: './dist',
    open: true,     /**open true 可以自动打开浏览器**/
    proxy: {
     &quot;/api&quot;: &quot;http://new.junbang.com/&quot; /**请求api代理转发**/ 
    },
    port: 8081,  /**端口号**/ 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;在package.json中添加watch命令
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;watch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack --watch&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack-dev-server&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;使用：npm run watch 监听文件有变化自动打包
使用：npm run start 可以自动监听,自动打包, 自动刷新浏览器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;自定义server&quot;&gt;&lt;strong&gt;自定义server&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;需要安装express和webpack-dev-middleward这两个插件
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install express webpack-dev-middleware --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建server.js 并引入插件
```js
const express = require(‘express’);
const webpack = require(‘webpack’);
const webpackDevMiddleware = require(‘webpack-dev-middleware’);
const config = require(‘./webpack.config.js’);
const complier = webpack(config);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;const app = express();&lt;/p&gt;

&lt;p&gt;app.use(webpackDevMiddleware(complier, {
    publicPath: config.output.publicPath
}));&lt;/p&gt;

&lt;p&gt;app.listen(3000,() =&amp;gt; {
    console.log(‘server is running on prot 3000’);
});&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
3. 在package.json中设置serve命令   
```js
&quot;scripts&quot;: {
    &quot;serve&quot;: &quot;node server.js&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;npm run serve 使用的就是我们server.js配置的服务器
不过server.js还需要写很多，这只是简单的server&lt;/p&gt;

&lt;h3 id=&quot;模块热更新hmr&quot;&gt;&lt;strong&gt;模块热更新HMR&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;开启模块热更新，在webpack.config.js中添加配置
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;devServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;hot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;hotOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/**hotOnly: false 浏览器可以自动刷新**/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;使用&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HMR&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;插件，在&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中引入插件&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'webpack'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt;重启服务使新的配置生效&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;模块热更新hmr作用&quot;&gt;&lt;strong&gt;模块热更新HMR作用：&lt;/strong&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;css编写. 修改无需重新刷新浏览器就可显示效果
js模块发生改变可以指定更新当前js模块，不需要刷新浏览器&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;js模块热更新，在index.js文件中编写代码
```js
import number from ‘./number’;
number();&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;if (module.hot) {
    module.hot.accept(‘./number’, () =&amp;gt; {
    /&lt;strong&gt;当number模块有改变重新渲染&lt;/strong&gt;/
     number();
    }
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **使用Babel处理ES6语法**

1. 安装babel-loader 和 @babel/core
`npm install --save-dev babel-loader @babel/core`   

2. 在webpack.config.js中添加配置
``` js
module: {
    rules: [{
        test: /\.js$/,
        exclude: /node_modules/,
        loader: &quot;babel-loader&quot;,
        options: {
            presets: [&quot;@babel/preset-env&quot;]
        }
    }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装@babel/preset-env模块对ES6语法进行翻译
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @babel/preset-env --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在webpack.config.js中的modules rules babel-loader 中配置options对象
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**或者在项目根目录下创建配置文件.bablerc**/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用@babel/polyfill 加上低版本没有的语法, 比如map() . Promise等
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save @babel/polyfill&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在所以代码运行之前,可以放在入口文件index.js最顶部
&lt;code class=&quot;highlighter-rouge&quot;&gt;import &quot;@babel/polyfill&quot;;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;polyfill默认会把所有翻译过代码都加进来，有时候我们没有用到的新方法，也有了翻译的方法在里面了，所以我们要过滤掉，没用上的就不要加载进来了，这样包更小，所以在webpack.config.js babel-loader中修改配置
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@babel/preset-env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'usage'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;已经支持ES6语法的浏览器版本，没必要在翻译所以我们可以指定浏览器版本
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@babel/preset-env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;67&quot;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**更多浏览器版本配置去babel官网查看**/&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'usage'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当指定了useBuiltIns: ‘usage’，会自动引入@babel/polyfill,所以可以去掉index.js import的@babel/polyfill,但是可以需要安装依赖
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save core-js&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是写业务代码以上配置没问题，如果要写框架. 类库. 第三方模块什么的，为了避免变量的全局污染（因为polyfille翻译的变量挂载到全局变量）而使用plugin-transform-runtime插件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;安装transform-runtime插件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev @babel/plugin-transform-runtime
npm install --save #babel/runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;在webpack.config.js中修改配置
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/plugin-transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;regenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;useESModules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;因为我们配置了corejs: 2,所以要加装corejs的依赖
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save @babel/runtime-corejs2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;配置react代码的打包&quot;&gt;&lt;strong&gt;配置React代码的打包&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;babel也可以打包react代码&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装react框架
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install react react-dom --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装@babel/preset-react
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev @babel/preset-react&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在.babelrc中添加配置
&lt;code class=&quot;highlighter-rouge&quot;&gt;presets: [&quot;@babel/preset-env&quot;,&quot;@babel/preset-react&quot;]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;使用tree-shaking去掉没有引用的方法-模块&quot;&gt;&lt;strong&gt;使用Tree Shaking去掉没有引用的方法/ 模块&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Tree Shaking只支持 ES Module 就是import export不支持require(‘’)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在mode: ‘development’中配置Tree Shaking, 在webpack.config.js中
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;optimization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nl&quot;&gt;usedExports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在mode: ‘production’中 默认就有,不需要添加任何配置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在package.json中配置不需要Tree Shaking的模块&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;sideEffects&quot;: false   /**所有模块都需要Tree Shaking**/
&quot;sideEffects&quot;: ['@babel/polly-fill', '*.css']  /**对这两个模块不做Tree Shaking**/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;development-和-production-模式的区分打包&quot;&gt;&lt;strong&gt;Development 和 Production 模式的区分打包&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;创建webpack.common.js 放公有的配置项&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建webpack.dev.js 放开发独有的配置项&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建webpack.prod.js 放生产独有的配置项&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用webpack-merge 把webpack.common.js合并到其他两个文件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install webpack-merge --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在webpack.dev.js中引入插件&lt;br /&gt;
```
const merge = require(‘webpack-merge’);
const commonConfig = require(‘./webpack.common.js’);&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;const devConfig = {
…
}
module.exports = merge(commonConfig, devConfig);&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
在webpack.prod.js中也作跟webpack.dev.js同样的处理

### **Code Splitting 代码分割**

1. 同步加载模块 在webpack.config.js中配置splitChunks
``` js
optimization: {
   splitChunks: {
       chunks: 'all'
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;异步加载模块无需任何配置默认就会自动分割&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建一个异步加载的js模块&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** webpackChunkName: &quot;lodash&quot; 给这个模块起这个文件名 **/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* webpackChunkName: &quot;lodash&quot;*/&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lodash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bang'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装babel-plugin-dynamic-import-webpack对异步加载模块语法进行翻译
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @babel/plugin-syntax-dynamic-import  --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在.babelrc配置文件中使用plugin-syntax-dynamic-import插件
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [&quot;@babel/plugin-syntax-dynamic-import&quot;]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;splitchunksplugin配置参数详解&quot;&gt;&lt;strong&gt;SplitChunksPlugin配置参数详解&lt;/strong&gt;&lt;/h3&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** 在webpack.config.js文件中 **/&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;optimization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;splitChunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** all:-- 所有模块都分割 **/&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** async -- 只对异步加载的模块进行分割 **/&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** initial -- 只对同步模块进行分割 **/&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;chunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;minSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/** 大于30000b(30kb)才会分割 **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;maxSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/**  一般不配置，会对大文件再次分割 **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;minChunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/**  引用这个模块超过一次就会分割 **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;maxAsyncRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**  同时只能加载分割5个库 **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;maxInitialRequests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/**  最多分割出3个文件 **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;automaticNameDelimiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** 文件名连接符  **/&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cacheGroups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;cm&quot;&gt;/** 同步模块加载必需配置
            vendors: {
                test: /[\\/]node_modules[\\/]/,
                /** 如果模块同时满足cacheGroups和default， **/&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/** 根据priority来决定模块的归属谁的值大属于谁 **/&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vendors.js'&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** 打包成的文件名 **/&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** 同步非node_modules里面的模块配置专用 **/&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/** 已经打包过的模块忽略 **/&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/** 不再打包分割 **/&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;reuseExistingChunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'common.js'&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;lazy-loading-懒加载异步模块&quot;&gt;&lt;strong&gt;lazy loading 懒加载异步模块&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;打包分析工具
首先在打包的时候生成josn格式的描述文件，然后在package.json中添加命令
```
scripts: {
 “dev-build”: “webpack –profile –json &amp;gt; stats.json –config webpack.dev.js”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
使用：`npm run dev-build`   
生成的.stats.json文件可以用来分析

### **使用Preloading, 空闲时候，静默加载我们的异步模块**

1. 查看js文件中代码的使用率，打开控制台 command + shift + p
2. 搜索 Coverage 选中show Coverage 然后点击录制按钮变红后刷新页面
3. 在index.js中创建一个异步加载模块js的方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;document.addEventListener(‘click’, () =&amp;gt; {
    import(/* webpackPrefetch: true */ ‘./click.js’).then(({default: func}) =&amp;gt; {
     func();
    });
});&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;正常情况下呢，我们只有在点击的时候，才加载click.js,但是配置了Prefetch: true,就会空闲时主动加载我们的click.js。空闲时主动加载解决了异步加载慢的问题，因为文件加载过了，再点击加载就会使用缓存的文件。

### **css文件代码分割**

1. webpack 用style-loader处理的css会放到文件&amp;lt;head&amp;gt;标签中
2. 使用mini-css-extract-plugin把css分割成单独文件
`npm install --save-dev mini-css-extract-plugin`   

3. 这个插件不支持热更新（截止目前），所以一般是生产环境才用   
4. 在webpack.prod.js中 将style-loader替换为MiniCssExtractPlugin.loader   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;const MiniCssExtractPlugin = require(‘mini-css-extract-plugin’);
plugins: [
    new MiniCssExtractPlugin({});
]
module: {
    rules: [
       {
           test: /.css$/,
           use: [ MiniCssExtractPlugin.loader, ‘css-loader’, ‘postcss-loader’ ]
    ]
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5. 过滤Tree Shakking, 在package.json中添加配置   
`&quot;sideEffects&quot;: [&quot;*.css&quot;]`   

6. 配置filename和chunkFilename, 在webpack.prod.js中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;plugins: [
    new MiniCssExtractPlugin({
        filename: ‘[name].css’,
        chunkFilename: ‘[name].chunk.css’
    });
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7. 使用optimize-css-assets-webpack-plugin对css合并和压缩
`npm install --save-dev optimize-css-assets-webpack-plugin`   

8. 在webpack.prod.js中使用optimize-css-assets-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;const OptimizeCssAssetsPlugin = require(‘optimize-css-assets-webpack-plugin’);
optimization: {
    minimizer: [new OptimizeCssAssetsPlugin({})]
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **多个入口文件引用的css打包到一个css文件**

1. 借助splitChunks, 在webpack.prod.js中添加配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;optimization: {
    splitChunks: {
        cacheGroups: {
            styles: {
                name: ‘styles’,
                test: /.css$/,
                chunks: ‘all’,
                enforce: true
            }
        }
    }
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2. 还可以把一个入口文件引入的所有css打包到对应的一个文件。这样每个入口引用的css，就会生成对应一个css文件。这个配置也借助splitChunks，在webpack.prod.js中配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;optimization: {
    splitChunks: {
        cacheGroups: {
            mainStyles: {
                name: ‘main’,
                test: (m,c,entry = ‘main’) =&amp;gt; m.constructor.name === ‘CssModule &amp;amp;&amp;amp; recursiveIssuer(m) === entry,
                chunks: ‘all’,
                enforce: true
            }
        }
    }
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **webpack与浏览器缓存**

1. 在webpack.prod.js中配置contenthash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;output: {
   filename: ‘[name].[contenthash].js’,
   chunkFilename: ‘[name].[contenthash].js’
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
contenthash在文件没有改变时，它不会变，对应的文件有改变它的值就会变，这样浏览器加载的就是新文件

### **通过webpack.ProvidePlugin插件自动帮我们引用没有import的模块**

1. 在webpack.common.js中配置ProvidePlugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;const webpack = request(‘webpack’);
plugins: [
    new webpack.ProvidePlugin({
    $: ‘jquery’
    })
]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;解决问题: 有的模块使用的是jquery,但是没有import jquery,$对象找不到，只在首页引入jquery是不行的,这时候借助webpack.ProvidePlugin,帮我们在使用$对象的模块引入jquery。

### **让this都指向window**

1. 安装
imports-loader
  `npm install imports-loader --save-dev`   
2. 在webpack.common.js中添加配置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;module: {
    rules: [{
        test: /.js$/,
        exclude: /node_modules/,
        use: [{
            loader: ‘babel-loader’,
        }, {
            loader: ‘imports-loader?this=&amp;gt;window’
        }]
    }]
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **环境变量的使用**

1. 在webpack.common.js中使用Env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;comst merge = require(‘webpack-merge’);
const prodConfig = require(‘./webpack.prod.js);
const devConfig = require(‘./webpack.dev.js’);
module.exports = (env) =&amp;gt; {
 if (env &amp;amp;&amp;amp; env.production) {
    return merge(commonConfig, prodConfig);
 } else {
    return merge(commonConfig, devConfig);
 }
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
2. 在package.json中修改命令
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;“scripts”: {
    “dev-build”: “webpack – config ./webpack.common.js”,
    “build”: “webpack –env.production  –config ./webpack.common.js”
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### **Library的打包**

1. 创建一个自己的包模块library
`npm init -y`   

2. 在包目录下新文件src/math.js 和 src/string.js
3. 在src/math.js中编写代码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;export function add(a, b) {
    return a + b;
}
export function minus(a, b) {
    return a - b;
}
export function multiply(a, b) {
    return a * b;
}
export function division(a, b) {
    return a / b;
}&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在src/string.js中编写代码
export function join(a, b) {
 return a + “ “ + b;
}
```&lt;/li&gt;
  &lt;li&gt;在src/index.js中编写代码
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as math from './math.js';
import * as string from './string';
export default { math, string }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目中安装webpack 和 webpack-cli
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install webpack webpack-cli --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在项目中创建webpack.config.js
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const path = require('path');
module.exports =  {
 mode: 'production',
 entry: './src/index.js'
 output: {
     path: path.resolve(__dirname, 'dist'),
     filename: 'library.js',
     library: 'library',
     libraryTarget: 'umd'
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在package.js中配置入口文件和打包命令
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main: './src/index.js',
scripts: {
 &quot;build&quot;: &quot;webpack&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;别人使用我们的库可能用到的引入方式
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import library from 'library';&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const library = require('library');&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require(['library'], function() {});&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;./library.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过在webpack.config.js中配置libraryTarget: ‘umd’可以使用前面三种引用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过在webpack.config.js中配置library: ‘library’可以使用&lt;script&gt;引用&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在自己的库中使用别人的库,这里引入lodash库&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install lodash --save&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在src/string.js中 使用lodash&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import _ from 'lodash';

export function join(a, b) {
    return _.join([a, b], ' ');
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;问题：默认的lodash也会被打包到我们的代码中，而别人不知道，也有可能在自己项目中，引入了自己的lodash,造成模块冗余，所以需要在webpack.config.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;externals: ['lodash']&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意：这个时候别人用我们的库需要手动引入lodash再引入library（我们的库）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;让别人方便的使用我们的代码,可以在package.json中配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;main&quot;: &quot;./dist/library.js&quot;,&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在npm官网注册一个账号,并把我们的库上传到npm&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm adduser -- 回车添加账号和密码
npm publish -- 把包上传到npm仓库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;安装我们的库&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install library&lt;/code&gt; &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;我们自己创建的库名跟npm上的库名不能相同，不然有可能上传不了。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;pwa的打包配置&quot;&gt;&lt;strong&gt;PWA的打包配置&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;PWA作用是缓存页面，当服务器挂掉了，还是可以看到原来缓存的页面&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装workbox-webpack-plugin插件
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install workbox-webpack-plugin --save-dev&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在webpack.prod.js中使用workbox-webpack-plugin插件
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const WorkboxPlugin = require('workbox-webpack-plugin');
plugins: [
 new WorkboxPlugin.GenerateSW({
     clientsClaim: true,
     skipWaiting: true
 })
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在index.js中看看浏览器是否支持PWA,并注册我们要缓存的文件
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if('serviceWorker' in navigator) {
 window.addEventListener('load', () =&amp;gt; {
     navigator.serviceWorker.register('/service-worker.js)
         .then(registration =&amp;gt; {
              console.log('service-worker registed');
         }).catch(error =&amp;gt; {
              console.log('service-worker register error');
         });
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这样注册了service-worker.js之后，本来我们需要npm run dev 把服务开启之后能访问，如果关掉服务再刷新，因为已经访问成功过一次，有了缓存，所以还是可以看到页面&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;webpack打包typescript&quot;&gt;&lt;strong&gt;webpack打包TypeScript&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;装ts-loader 和 typescript
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install ts-loader typescript --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在webpack.config.js中添加配置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const path = require('path');
 module.exports = {
entry: './srcindex.tsx',
module: {
   rules: [{
     test: /\.[tsx]|[ts]?$/,
     use: 'ts-loader',
     exclude: /node_modules/
   }]
},
output: {
   filename: 'bundle.js',
   path: path.resolve(__dirname, 'dist')
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在项目根目录创建tsconfig.json(必需)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;compilerOptions&quot;: {
 &quot;outDir&quot;: &quot;./dist&quot;,
 &quot;module&quot;: &quot;es6&quot;,
 &quot;target&quot;: &quot;es5&quot;,
 &quot;allowJs&quot;: true,
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;注意：TypeScript 不能对引用的外部模块校验，比如调用lodash中的join()方法，不传参数也不报错。如需要提示，需安装@types/lodash，这样不传参数也会有提示哦。 更多库的@type检测请上网搜索！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;安装@types/lodash
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @types/lodash --save-dev&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;webpackdevserver实现请求转发&quot;&gt;&lt;strong&gt;webpackDevServer实现请求转发&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;在webpack.config.js中配置proxy
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devServer: {
 proxy: {
    '/api': 'http://new.junbang.vip'
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;更复杂的配置 比如把请求header.json 变成demo.json
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devServer: {
 proxy: {
     '/api': {
          treget: 'http://new.junbang.vip',
          pathRewrite: {
              'header.json': 'demo.json'
          }
      }
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果后台对origin做了限制可以加配置
&lt;code class=&quot;highlighter-rouge&quot;&gt;changeOrigin: true /**建议始终都加**/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;webpackdevserver解决单页面应用路由问题&quot;&gt;&lt;strong&gt;WebpackDevServer解决单页面应用路由问题&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;在webpack.config.js中
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devServver: {
 historyApiFallback: {
     rewrites: [{
         from: /\.*/,
         to: 'index.html'
     }]
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;上面的配置等价于historyApiFallback: true，这个配置只在开发有用，上线需要对线上服务器也配置。配置好了，访问不了的页面就会显示首页&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;eslint-在wepback中的配置&quot;&gt;&lt;strong&gt;Eslint 在wepback中的配置&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Eslint是什么？Eslint是约束代码的规范&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装Eslint
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install eslint --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成配置文件
&lt;code class=&quot;highlighter-rouge&quot;&gt;npx eslint --init&lt;/code&gt;&lt;br /&gt;
在根目录发现文件.eslintrc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用babel-eslint
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install babel-eslint --save-dev&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在.eslintrc.js中配置
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;parser&quot;: &quot;babel-eslint&quot;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用命令校验src目录下的js
&lt;code class=&quot;highlighter-rouge&quot;&gt;npx eslint src&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;忽略规则,在.eslintrc.js中
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;rules&quot;: {
  &quot;react/jsx-filename-extension&quot;: 0
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;把规则置成0就可以忽略 1是警告 2是报错&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;在webpack使用eslint-loader校验代码&quot;&gt;&lt;strong&gt;在webpack使用eslint-loader校验代码&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;安装eslint-loader
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install eslint-loader --save-dev&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在webpack.config.js中添加配置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module: {
  rules: [{
 test: /\.js$/,
 exclude: /node_modules/,
 use: ['babel-loader', 'eslint-loader']
  }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;想要在&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run serve&lt;/code&gt;的时候把eslint校验的错误在浏览器上输出, 可以在webpack.config.js中配置&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;devServer: {
    overlay: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：在webpack中使用eslint-loader检测代码会影响打包速度。可以在git 生命钩子，提交代码前校验代码，不符合不给提交&lt;/p&gt;

&lt;h3 id=&quot;webpack性能优化&quot;&gt;&lt;strong&gt;webpack性能优化&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;提升webpack打包速度&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;1)跟上技术的迭代，使用最新版node/npm/yarn/webpack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2)尽量少用loader,loader也应该检测尽量少的代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;3)比如校验js文件的时候，忽略/node_modules/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;4)或者只对src下面的文件校验
&lt;code class=&quot;highlighter-rouge&quot;&gt;include: path.resolve(__dirname, './src') &lt;/code&gt;
5)合理使用插件，使用性能好的，官方推荐的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;合理配置resolve参数&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test: /\.jsx?$/ '?' 表示'x'可有可无 =&amp;gt; js/jsx&lt;/code&gt;
然后在webpack.config.js中添加配置&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resolve: {
extensions: ['.js', '.jsx']
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;表示我们加载import 的时候，不写文件后缀名，默认会找.js/.jsx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;当我们import 一个文件夹，可能指定要找的文件名&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resolve: {
mainFiles: ['index', 'main']
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;使用第三方模块时候，因为我们不会去改动这些模块,但是每次打包都会重新分析一次这些第三方模块，浪费时间,所以希望只在第一次分析，后面直接用就行。所以&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;1）新建webpack.dll.js文件&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const path = require('path');
module.exports = {
  mode: 'production',
 entry: {
 vendors: ['react', 'react-dom', 'lodash']
},
output: {
  filename: '[name].dll.js',
  path: path.resolve(__dirname, '../dll'),
  library: ['name'] /** library 可以把当前模块暴露出去 **/
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;2) 把这些第三方模块引入index.html中，可以手动引入，也可以用插件
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install add-assets-html-webpack-plugin --save-dev&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;3) 在webpack.config.js中使用插件&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const AddAssetHtmlWebpackPlugin require('add-asset-html-webpack-plugin');

new AddAssetHtmlWebpackPlugin({
 filepath: path.resolve(__dirname, '../dll/vendors.dll.js')
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;4) 在写代码使用到第三方模块时，使用vendors.dll.js
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install dll-plugin --save-dev&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;5) 在webpack.config.js中配置&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const webpack = require('webpack');
plugins: [
new webpack.DllPlugn({
  name: '[name]',
  path: path.resolve(__dirname, '../dll/[name].manifest.json')
}),
new webpack.DllReferencePlugin({
  manifest: path.resolve(__dirname, '../dll/vendors.manifest.json')
 })
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;配置完成，第三方模块我们只需要手动打包一次，后面在打包项目的时候，就只会打包我们改动代码的目录src&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;多页面打包配置&quot;&gt;&lt;strong&gt;多页面打包配置&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;首先需要配置多个入口，生成多个js文件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry: {
  main: './src/index.js',
  list: './src/list.js'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;其次多new 几个HtmlWebpackPlugin,生成那就的html文件&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new HtmlWebpackPlugin({
  template: 'src/index.html',
  filename: 'index.html',
  chunks: ['runtime', 'vendors', 'main']
}),
new HtmlWebpackPlugin({
  template: 'src/index.html'
  filename: 'list.html',
  chunks: ['runtime', 'vendors', 'list']
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;可能遍历configs.entry自动生成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
参考资料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;转自简书&lt;a href=&quot;https://www.jianshu.com/p/25bde7e9b9ce&quot;&gt;説好的妹紙呢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 19 Aug 2019 01:00:06 +0800</pubDate>
        <link>http://localhost:4000/2019/08/Webpack/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/Webpack/</guid>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>Js垃圾收集机制原理</title>
        <description>&lt;h4 id=&quot;1-原理&quot;&gt;&lt;strong&gt;1. 原理：&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  找出那些不再继续使用的变量，然后释放其占用的内存，垃圾收集器会按照固定的时间间隔，或是在代码执行中预订的收集时间，去周期性的执行这个操作，完成垃圾的清理。&lt;/p&gt;

&lt;h4 id=&quot;2-局部变量的生命周期&quot;&gt;&lt;strong&gt;2. 局部变量的生命周期:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  在函数执行的过程中，才存在有局部变量，在这个过程中，浏览器引擎会为局部变量在栈或是堆内存上分配相应的空间，以便存储这些值。在函数执行结束后，局部变量就没有存在的必要了，因此可以释放它们所占用的内存以供将来使用。这种情况下会比较好判断变量有没有必要存在了，但是作用域还没有结束，当前变量还被其他地方调用了，那么垃圾收集器就得跟踪这些变量哪个有用哪个没用，做上相应的标记。&lt;/p&gt;

&lt;h4 id=&quot;3-垃圾清理实现策略一标记清除&quot;&gt;&lt;strong&gt;3. 垃圾清理实现策略一：标记清除：&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  当变量进入环境时，如在函数中var一个变量，此时将这个变量标记为进入环境，当变量离开环境的时候，则将其标记为离开环境，可以通过翻转某一个位来标记一个变量何时进入了环境。但标记不是重点，重点是标记了之后怎么来将其处理。垃圾收集器会在运行的时候给存储在内存中的所有变量都加上标记，然后，它会去掉环境中的变量以及被环境中的变量应用的标记，在此之后再把加上标记的变量都将被视为准备删除的变量。最后，垃圾收集器完成内存的清楚工作，销毁那些带标记的值并收回它们所占用的内存空间。&lt;/p&gt;

&lt;h4 id=&quot;4-垃圾清理实现策略二引用计数&quot;&gt;&lt;strong&gt;4. 垃圾清理实现策略二：引用计数&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  跟踪记录每个值被引用的次数，当这个值的引用次数变成0的时候，说明没有办法再访问这个这个值，就将其占用的内存空间收回来，下次再运行垃圾收集器的时候，就会释放哪些引用次数为0的值所占用的内存了。&lt;/p&gt;

&lt;p&gt;  但存在的一个问题是，如果有循环引用，即A有个指针指向B，B也有一个指针指向A，在采用标记清楚策略的实现中，这将是个噩梦。如果DOM元素和原生JS对象之间创建了循环引用，那就带来内存泄露的问题，解决方法是把DOM和BOM对象转换成真正的JS对象。&lt;/p&gt;

&lt;h4 id=&quot;5-垃圾收集的时间间隔&quot;&gt;&lt;strong&gt;5. 垃圾收集的时间间隔：&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  原来IE的垃圾收集器的启动方式是，当内存分配量达到256个变量、4096个对象字面量和数组元素或是64kb的字符串这三者任何一个临界值时，就开始启动垃圾收集器。但一个脚本中可能会在其生命周期中一直保有那么多变量，那么垃圾收集器就得一直的去运行，那导致的性能问题是很严重的。所以后面的优化方法是：触发垃圾收集的变量分配的临界值被调整为动态修正。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;JS是一门具有自动垃圾收集机制的编程语言，开发人员不必担心内存分配和回收的问题，对其垃圾收集例程总结如下：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  离开作用域的值将被自动标记为可以回收，因此在垃圾收集期间被删除；&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;“标记清除”&lt;/strong&gt;是目前主流的垃圾收集算法，其思想是给当前不使用的值加上标记，然后再回收其内存；&lt;/p&gt;

&lt;p&gt;  另一种收集算法是“引用计数”，其思想是跟踪记录所有值被引用的次数，JS引擎目前都不在使用该算法，但在IE中访问非原生JS对象（如DOM元素）时，这种算法仍然可能会导致问题，当代码中存在循环引用现象时亦会导致问题；&lt;/p&gt;

&lt;p&gt;  解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处，为了确保有效地回收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环变量的引用。&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Aug 2019 04:15:06 +0800</pubDate>
        <link>http://localhost:4000/2019/08/JS%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/JS%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86/</guid>
        
        <category>Javascript</category>
        
        
      </item>
    
  </channel>
</rss>
