<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tien</title>
    <description>The truth is what it is, not what you see.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 02 Apr 2020 15:48:50 +0800</pubDate>
    <lastBuildDate>Thu, 02 Apr 2020 15:48:50 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Vuex</title>
        <description>&lt;h4 id=&quot;1-vuex概述&quot;&gt;&lt;strong&gt;1. Vuex概述&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;  &lt;strong&gt;1.1 vue组件之间共享数据的方式&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;父向子传值： &lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind&lt;/code&gt; 属性绑定 &lt;br /&gt;
子向父传值： &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt; 事件绑定 &lt;br /&gt;
兄弟组件之间传值：&lt;code class=&quot;highlighter-rouge&quot;&gt;EventBus&lt;/code&gt; ,  发送数据的组件&lt;code class=&quot;highlighter-rouge&quot;&gt;$emit&lt;/code&gt; , 接受数据的组件  &lt;code class=&quot;highlighter-rouge&quot;&gt;$on&lt;/code&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;  &lt;strong&gt;1.2 Vuex是什么&lt;/strong&gt; &lt;br /&gt;
Vuex是实现组件全局状态（数据）管理的机制，可以方便地实现组件之间传值。(适用于大数据共享或者数据频繁共享的场景)&lt;/p&gt;

&lt;p&gt;如下图所示，常规组件A-&amp;gt;B传值，需要A逐级向上到根，再到B，传值较为麻烦。而VueX可以把共享数据存储在Store中，A直接存进Store，B再直接调用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gde0pyam8gj30j80a50tx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  &lt;strong&gt;1.3 Vuex统一管理的优点&lt;/strong&gt; &lt;br /&gt;
一般情况下，只有组建共享的数据才会存储在Vuex Store中，组件私有数据依然存在组件data中&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a. 能够在VueX中集中管理共享的数据，便于开发和维护 &lt;br /&gt;
b. 能够高效地实现组件之间的传值，便于提高开发效率 &lt;br /&gt;
c. 存储在VueX中的数据都是响应式的，能够实时保持数据和页面的同步&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-vuex核心概念&quot;&gt;&lt;strong&gt;2. Vuex核心概念&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;  &lt;strong&gt;2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt;  唯一的公共数据源，所有的数据都要统一放到Store的state中存储&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;两种触发方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;this.$store.state.srcData&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;Addition: {{ this.$store.state.srcData }}&amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;mapState&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. 导入mapSate函数 
import { mapState } from 'vuex'

b. //然后在组件的computed属性映射
export default {
  data() {
    return {}
  },
  computed: {
    ...mapState(['srcData']),
  } 
}

c. 最后在模板中直接引用映射结果
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;Subtraction:{{ srcData }}&amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;  &lt;strong&gt;2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutations&lt;/code&gt;  用于变更Store中的数据（mutation不能执行异步操作），便于集中监控数据变化（因此不推荐在模板中直接用  $store.state.数据名 进行修改）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;两种触发方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;组件methods中通过 this.$store.commit(‘mutations 非异步操作函数名’)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js 中定义mutation
export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    add(state) {
      state.count++
    }
  })

b. 组件methods中触发
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button @click=&quot;handlerBtn1()&quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {}
  },
  methods: {
    handlerBtn1() {
      this.$store.commit('add')
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;mapMutations&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js 中定义mutations
export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    add(state) {
      state.count++
    }
  })

b. 组件中引入mapMutations函数，然后在methods中触发
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button @click=&quot;handlerBtn1&quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapMutations} from 'vuex'

export default {
  data() {
    return {}
  },
  methods: {
    ...mapMutations(['sub']),
    handlerBtn1() {
      this.sub()
    }
  }
} 
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;   &lt;strong&gt;2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt;   用于处理异步任务（如果要异步操作变更数据，必须通过Action，而不能使用Mutation，但Action的本质还是通过触发Mutation的方式间接地变更数据）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;两种触发方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;this.$store.dispatch(‘actions异步函数名’)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js 定义actions
export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations:{
     add(state) {
      state.count++
    }
  },
  actions: {
    addAsync(context) {
      setTimeout(() =&amp;gt; {
        context.commit('add')
      }, 1000)
    }
  })

b. 组件methods中触发 this.$store.dispatch('addAsync')
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button @click=&quot;handlerBtn1()&quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {}
  },
  methods: {
    handlerBtn1() {
      this.$store.dispatch('addAsync')
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;mapActions函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js 定义actions
export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations:{
     add(state) {
      state.count++
    }
  },
  actions: {
    addAsync(context) {
      setTimeout(() =&amp;gt; {
        context.commit('add')
      }, 1000)
    }
  })

b. 组件引入mapActions函数，将需要的函数映射为组件的methods方法   
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;button @click=&quot;handlerBtn1&quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {}
  },
    methods: {
    ...mapActions(['addAsync'])
    handlerBtn1(){
      this.addAsync()
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;   &lt;strong&gt;2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;Getters&lt;/code&gt;  用于对Store中的数据进行加工处理形成新的数据（不会修改store的数据，只起到包装的作用），Store中数据变化时，Getter的数据也会随之变化&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;两种触发方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;this.$store.getters.函数名&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js中定义getters
export default new Vuex.Store({
  state: {
    count: 0
  },
  getters:{
      show: (state) =&amp;gt; {
      return '当前最新的数据:' + state.count
    }
  }
}

b. 组件中  this.$store.getters.函数  直接调用
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h4&amp;gt;{{this.$store.getters.show}}&amp;lt;/h4&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;mapGetters函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a. store.js中定义getters
export default new Vuex.Store({
  state: {
    count: 0
  },
  getters:{   //步骤一
      show: (state) =&amp;gt; {
      return '当前最新的数据:' + state.count
    }
  }
}

b. 组件中引入mapGetters函数，把函数映射到组件的computed属性，然后模板中直接调用函数
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h4&amp;gt;{{show}}&amp;lt;/h4&amp;gt;  //步骤四， 直接调用
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { mapGetters } from 'vuex'  //步骤二
export default {
  data() {
    return {}
  },
  computed: {  //步骤三
    ...mapGetters(['show'])
  }
}
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 25 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/03/vuex/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/03/vuex/</guid>
        
        <category>Vue</category>
        
        
      </item>
    
      <item>
        <title>jekyll问题总结</title>
        <description>&lt;h4 id=&quot;本地执行-jeykll-serve-时遇到的问题&quot;&gt;&lt;strong&gt;本地执行 jeykll serve 时遇到的问题：&lt;/strong&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;提示 “Liquid Exception: Liquid syntax error (line 67): Variable ‘{{…}’ was not properly terminated with regexp: /\}\}/ in …”&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;原因：&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;代码块中有{}导致&lt;/code&gt;  &lt;br /&gt;
&lt;strong&gt;解决办法：&lt;/strong&gt; 在代码块前后加上  {% raw %} &lt;code class=&quot;highlighter-rouge&quot;&gt;代码块&lt;/code&gt; {% endraw %} ，如下图：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gdd53vg6rbj30c804vdfn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/03/jekyll%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/03/jekyll%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
        
        <category>Tools/Jekyll</category>
        
        
      </item>
    
      <item>
        <title>Google search console</title>
        <description>&lt;h4 id=&quot;一什么是google-search-console&quot;&gt;一、什么是Google Search Console&lt;/h4&gt;

&lt;p&gt;  &lt;a href=&quot;https://search.google.com/search-console/welcome?hl=zh-CN&amp;amp;utm_source=about-page&quot;&gt;Search Console&lt;/a&gt; 是搜索引擎Google旗下的一款免费站长工具，类似于国内的百度资源平台和其他搜索引擎的站长平台，通过注册验证网站域名，可以直观的看到网站在搜索引擎中的一些点击展现数据，以及工具提供的其它管理性的功能，同时也能接收到搜索引擎对网站检测的一些提示或通知信息，有利于更好更优质的管理站点在搜索引擎的表现，也是每个站长和网站 &lt;code class=&quot;highlighter-rouge&quot;&gt;SEOer&lt;/code&gt; 必要的使用工具。&lt;/p&gt;

&lt;h4 id=&quot;二使用方法&quot;&gt;二、使用方法&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用谷歌账号登录&lt;a href=&quot;https://search.google.com/search-console/welcome?hl=zh-CN&amp;amp;utm_source=about-page&quot;&gt;Google Search Console&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用网址前缀验证，输入网址
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwly1gbn075v0wqj31g90g5aah.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择HTML标记验证
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwgy1gbn0lnr8xej30gk0tu0ts.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将复制的元标记（meta标签）粘贴到入口文件的head标签中
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwly1gbn0wk2ptwj31ds0s0di5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;待入口文件更新后，在网页端查看源码，显示步骤3中复制的元标记（meta标签）已添加到入口文件head中，此时再点击步骤3中的验证按钮 
&lt;img src=&quot;https://tva1.sinaimg.cn/large/0082zybply1gbn4rhk5vnj31dn0rignn.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;验证成功，点击前往资源页面
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwgy1gbn0o37mhtj30lg0kht99.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进入Google Search Console管理页面，待数据更新后即可查看网站的展现数据
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwly1gbn15tr2joj31kc0u0ta1.jpg&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006tNbRwly1gbn18qbhg4j31is0u0jsl.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 07 Feb 2020 04:46:06 +0800</pubDate>
        <link>http://localhost:4000/2020/02/Google-Search-Console/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/02/Google-Search-Console/</guid>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>使用Map类型控制表单提交</title>
        <description>&lt;h4 id=&quot;1-map和weakmap的区别&quot;&gt;1. Map()和WeakMap()的区别&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Map()键可以是任意对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let map = new Map(); //键可以使任意类型
  console.log(map.set(1, 'This is Map test')); //Map { 1 =&amp;gt; 'This is Map test' }
  
  let user = {
    name: &quot;ABC&quot;
  }
  console.log(map.set(user, ['abc']));  //Map { 1 =&amp;gt; 'This is Map test', { name: 'ABC' } =&amp;gt; [ 'abc' ]   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;WeakMap()键是且只能是引用类型(对象)，对键名所引用对象的引用是弱引用，当所引用的对象的其他引用被清除时，回收机制就会释放该对象所占用的内存。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let weakmap = new WeakMap(); //键是且只能是引用类型（对象）
  console.log(weakmap.set([1, 2], 'This is WeakMap test')); //WeakMap {Array(2) =&amp;gt; &quot;This is WeakMap   test&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;怎么理解 &lt;strong&gt;当所引用的对象的其他引用被清除时，回收机制就会释放该对象所占用内存。&lt;/strong&gt; 这句话呢，举例说明如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let test = {
    name: &quot;Test&quot;
  };
  a = test;
  let weakmap = new WeakMap();
  weakmap.set(test, &quot;ABC&quot;);
  console.log(weakmap);  //此时输出如图一，键值都正常，且键为对象test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gdcb64t4rzj30b304cglj.jpg&quot; alt=&quot;图一&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
   let test = {
     name: &quot;Test&quot;
   };
   a = test;
   let weakmap = new WeakMap();
   weakmap.set(test, &quot;ABC&quot;);
   test = null;
   a = null;
   console.log(weakmap); //此时输出如图二，对象test的引用都置为null时，内容是No properties，但显示WeakMap{{...} =&amp;gt; &quot;ABC&quot;}，这是因为系统还没有立刻感知到，待系统回收对象test所占内存后就会输出如图三所示
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gdcb6d5tgej30bj03bdfp.jpg&quot; alt=&quot;图二&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let test = {
    name: &quot;Test&quot;
  };
  a = test;
  let weakmap = new WeakMap();
  weakmap.set(test, &quot;ABC&quot;);
  test = null;
  a = null;
  setTimeout(() =&amp;gt; {
    console.log(weakmap); 
  }, 1000);  //此时输出如图三，一定时间后，对象test所占内存被回收，所以显示 WeakMap{} ，与图二显示 WeakMap{{...} =&amp;gt; &quot;ABC&quot;} 不同
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gdcb6iiky0j30b203bt8k.jpg&quot; alt=&quot;图三&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-控制表单提交示例&quot;&gt;2. 控制表单提交示例&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;使用Map类型控制表单提交&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://baidu.com&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onsubmit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;return post()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;agreement&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;请接收协议&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;接受协议
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;student&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;网站只对学生开放&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;我是学生
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[error]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;errorInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//every()保证元素调用结果都返回true，即全部选中才可提交 &lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;errorInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//短路运算config.status为false时，弹出alert&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/00831rSTly1gdcbm2bg8cg30m00dbagx.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/01/%E4%BD%BF%E7%94%A8Map%E6%8E%A7%E5%88%B6%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/%E4%BD%BF%E7%94%A8Map%E6%8E%A7%E5%88%B6%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>JS浅拷贝和深拷贝</title>
        <description>&lt;h4 id=&quot;1-浅拷贝&quot;&gt;1. 浅拷贝&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//原始对象exp1
let exp1 = {
  name: 'exp1',
  data: 1234
}
 let exp2 = exp1     //只是把exp1所储存的内存地址复制给exp2, exp1和exp2指向同一个对象（传址）
 exp2.name = 'exp2'   //修改其中一个的属性会导致另一个的属性也跟着改变
   console.log(exp1);   //{ name: 'exp2', data: 1234 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// =========浅拷贝-1=========
let exp3 = {
  name : exp1.name,
  data : exp1.data
}
exp3.name = 'exp3'
  console.log(exp3);  //{ name: 'exp3', data: 1234 }   复制exp1第一层属性，改变exp3时不影响exp1
  console.log(exp1);  //{ name: 'exp1', data: 1234 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// =========浅拷贝-2=========
let exp4 = {}
for (const key in exp1) {   //当exp1属性较多时，用上面的方法逐个复制便不是很便利了，所以可采用for in循环复制，exp4的修改也不会影响exp1
  exp4[key] = exp1[key]
}
exp4.name = 'exp4'
  console.log(exp4);   //{ name: 'exp4', data: 1234 }
  console.log(exp1);   //{ name: 'exp1', data: 1234 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// =========浅拷贝-3=========
let exp5 = Object.assign({}, exp1)  //使用Object.assign()方法
exp5.name = 'exp5'
  console.log(exp5);   //{ name: 'exp5', data: 1234 }
  console.log(exp1);   //{ name: 'exp1', data: 1234 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// =========浅拷贝-4=========
let exp6 = {...exp1}   //使用ES6的展开语法
exp6.name = 'exp6'
  console.log(exp6);   //{ name: 'exp6', data: 1234 }
  console.log(exp1);   //{ name: 'exp1', data: 1234 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 浅拷贝只复制对象的第一层属性，深拷贝可以对对象的属性进行递归复制&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-深拷贝&quot;&gt;2. 深拷贝&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//原对象
let exp_1 = {
  name: 'exp_1',
  data: {
    m: 123,
    n: 'ABC'
  }
}

let exp_2 = {
  name: exp_1.name,
  data: exp_1.data  //exp_1深层属性是个对象，这里依然只是复制了对象的地址，所以exp_2.data.m修改会引起exp_1中data对象的m变化
}
exp_2.name = 'exp_2'
exp_2.data.m = 456
  console.log(exp_2); //{ name: 'exp_2', data: { m: 456, n: 'ABC' } }
  console.log(exp_1); //{ name: 'exp_1', data: { m: 456, n: 'ABC' } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//要实现深拷贝就必须对原对象里的各层数据逐层递归处理
function copy(object) {
  let res = {}
  for (const key in object) {
    res[key] = typeof object[key] == &quot;object&quot; ? copy(object[key]) : object[key];
  }
  return res;
}

let exp_3 = copy(exp_1);
exp_3.name = 'exp_3'
exp_3.data.m = 789
  console.log(exp_3); //{ name: 'exp_3', data: { m: 789, n: 'ABC' } }
  console.log(exp_1); //{ name: 'exp_1', data: { m: 123, n: 'ABC' } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;但此时上述方法有一个问题，即当原对象中有数组时便会出错&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//当原对象为：
let exp_1 = {
  name: 'exp_1',
  data: {
    m: 123,
    n: 'ABC'
  },
  arr: ['a']
}

function copy(object) {
  let res = {}
  for (const key in object) {
    res[key] = typeof object[key] == &quot;object&quot; ? copy(object[key]) : object[key];
  }
  return res;
}

let exp_3 = copy(exp_1)
exp_3.name = 'exp_3'
exp_3.data.m = 456
  console.log(exp_3); //{ name: 'exp_3', data: { m: 456, n: 'ABC' }, arr: { '0': 'a' } }
  console.log(exp_1); //{ name: 'exp_1', data: { m: 123, n: 'ABC' }, arr: [ 'a' ] }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;此时，发现exp_3中的arr变成了对象，而非数组，所以需要改造copy函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//改造copy函数
function copy(object) {
  let res = object instanceof Array ? [] : {};
  for (const [k, v] of Object.entries(object)) {
    res[k] = typeof v == 'object' ? copy(v) : v
  }
  return res;
}

let exp_3 = copy(exp_1)
exp_3.name = 'exp_3'
exp_3.data.m = 456
exp_3.arr.push('b')
  console.log(exp_3); //{ name: 'exp_3', data: { m: 456, n: 'ABC' }, arr: [ 'a', 'b' ] }
  console.log(exp_1); //{ name: 'exp_1', data: { m: 123, n: 'ABC' }, arr: [ 'a' ] }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt; 深拷贝不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次递归复制到新对象上，所以对新对象的修改并不会影响原对象。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 02 Jan 2020 04:46:06 +0800</pubDate>
        <link>http://localhost:4000/2020/01/JS%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/01/JS%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>v-model原理</title>
        <description>&lt;h4 id=&quot;1v-model其实是一个语法糖本质上是如下两个操作&quot;&gt;1.v-model其实是一个语法糖，本质上是如下两个操作：&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;a)  v-bind绑定一个value属性 &lt;br /&gt;
 b)  v-on指令给当前元素绑定input事件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;input type=&quot;text&quot; v-bind:value = &quot;message&quot; v-on:input = &quot;valueChange&quot;&amp;gt;
        &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        const app = new Vue({
            el: '#app',
            data: {
                message: 'Hello'
            },
            methods: {
                valueChange(event){
                    this.message = event.target.value;
                }
            }
        })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;上述methods方法可以省略，利用event事件将input监听简写

    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;input type=&quot;text&quot; :value = &quot;message&quot; @input = &quot;message = $event.target.value&quot;&amp;gt;
        &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        const app = new Vue({
            el: '#app',
            data: {
                message: 'Hello'
            }
        })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;v-model是上述v-bind和v-on的语法糖，所以

&amp;lt;input type = &quot;text&quot; v-bind:value = &quot;message&quot; v-on:input = &quot;message = $event.target.value&quot;&amp;gt;

等同于

&amp;lt;input type = &quot;text&quot; v-model = &quot;message&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 17 Dec 2019 02:46:06 +0800</pubDate>
        <link>http://localhost:4000/2019/12/v-model%E5%8E%9F%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/v-model%E5%8E%9F%E7%90%86/</guid>
        
        <category>Framework/Vue</category>
        
        
      </item>
    
      <item>
        <title>vue父子组件之间的传值</title>
        <description>&lt;h3 id=&quot;1-父组件向子组件传值&quot;&gt;1. 父组件向子组件传值&lt;/h3&gt;

&lt;h4 id=&quot;-11-第一个就是要明白怎么在父页面中向子组件中传值&quot;&gt;  1.1 第一个就是要明白怎么在父页面中向子组件中传值？&lt;/h4&gt;

&lt;p&gt;你可以给子组件传入一个静态的值：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogdk4eofj30gq01ft8i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但我们一般都是需要传动态的值，所以需要v-bind绑定：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogdyto18j30gn038747.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你传的值可以是数字、对象、数组等等，参见vue官网。&lt;/p&gt;

&lt;h4 id=&quot;-12-第二个就是要知道如何在子组件中接受父页面传过来的值有几点需要了解&quot;&gt;  1.2 第二个就是要知道如何在子组件中接受父页面传过来的值，有几点需要了解：&lt;/h4&gt;

&lt;p&gt;组件实例的作用域是孤立的；&lt;/p&gt;

&lt;p&gt;子组件要显式的用props选项声明它预期的数据，如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 某个子组件中：
export default {
  props: {
    title: {
      type: String,
      default: 'hello world'
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后就可以在页面中使用了，具体我们在项目中体现。&lt;/p&gt;

&lt;p&gt;以上就是单向数据流的一般表现了： &lt;strong&gt;父级 prop 的更新会向下流动到子组件中，但是反过来则不行。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-子组件向父组件传值&quot;&gt;2. 子组件向父组件传值&lt;/h3&gt;

&lt;p&gt;那么我们延伸一下，子组件怎么向父组件传值？&lt;/p&gt;

&lt;h4 id=&quot;-21-基本概念&quot;&gt;  2.1 基本概念&lt;/h4&gt;

&lt;p&gt;在Vue中，父子组件的关系可以总结为&lt;code class=&quot;highlighter-rouge&quot;&gt;prop&lt;/code&gt;向下传递，事件向上传递。父组件通过&lt;code class=&quot;highlighter-rouge&quot;&gt;prop&lt;/code&gt;给子组件下发数据，子组件通过&lt;code class=&quot;highlighter-rouge&quot;&gt;事件&lt;/code&gt;给父组件发送信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8ogedzh3aj306u06smx0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;props down , events up
每个Vue实例都实现了事件接口：使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$on(evntName)&lt;/code&gt;监听事件；使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$emit(eventName,optionalPayload)&lt;/code&gt;触发事件。另外，父组件可以在使用子组件的地方直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;v-on&lt;/code&gt;来监听子组件触发的事件。&lt;/p&gt;

&lt;h4 id=&quot;-22-举例说明&quot;&gt;  2.2 举例说明&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;父组件在组件上定义了一个自定义事件&lt;code class=&quot;highlighter-rouge&quot;&gt;childFn&lt;/code&gt;，事件名为&lt;code class=&quot;highlighter-rouge&quot;&gt;parentFn&lt;/code&gt;用于接受子组件传过来的&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 父组件 --&amp;gt;
&amp;lt;template&amp;gt;
    &amp;lt;div class=&quot;test&quot;&amp;gt;
      &amp;lt;test-com @childFn=&quot;parentFn&quot;&amp;gt;&amp;lt;/test-com&amp;gt;
      &amp;lt;br/&amp;gt; 
      子组件传来的值 : 
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
    // ...
    data: {
        message: ''
    },
    methods: {
       parentFn(payload) {
        this.message = payload;
      }
    }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;子组件是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;buttton&lt;/code&gt;按钮，并为其添加了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;click&lt;/code&gt;事件，当点击的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$emit()&lt;/code&gt;触发事件，把&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;传给父组件。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 子组件 --&amp;gt;
&amp;lt;template&amp;gt; 
&amp;lt;div class=&quot;testCom&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&amp;gt;
    &amp;lt;button @click=&quot;click&quot;&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {
    // ...
    data() {
        return {
          // 默认
          message: '我是来自子组件的消息'
        }
    },
    methods: {
      click() {
            this.$emit('childFn', this.message);
        }
    }    
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样我们就基本实现了子组件向父组件发送值了。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Nov 2019 17:28:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</guid>
        
        <category>WEB/Framework</category>
        
        
      </item>
    
      <item>
        <title>create-react-app部署项目到Github Pages</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://willtien.com/Account-app/&quot;&gt;账单薄项目预览&lt;/a&gt; &lt;br /&gt;
mockAPI: &lt;a href=&quot;https://5db85da7177b350014ac796d.mockapi.io/api/v1/records&quot;&gt;API endpoint&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-创建项目&quot;&gt;&lt;strong&gt;1. 创建项目&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;使用 create-react-app 脚手架创建项目&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install create-react-app 
npm create-react-app my-app
cd my-app
npm start  // 运行

npm run eject //解压默认webpack包，操作不可逆
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-将本地的文件-push-至远端仓库&quot;&gt;&lt;strong&gt;2. 将本地的文件 push 至远端仓库&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init         // 初始化一个文件夹为本地仓库
git status    // 查看状态和是否存在.git文件
git add .      // 添加到暂存区
git commit -m '提交'            // 提交到版本库且增添提交备注
git remote add origin {url}   // {url} 是你的GitHub上reponsitory地址
git push -u origin master     // 将代码推送到GitHub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-github-pages-部署&quot;&gt;&lt;strong&gt;3. Github Pages 部署&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;把项目部署成GitHub pages，在GitHub上点开项目到设置，翻到Github Pages设置处，可以看到GitHub Pages只能使用master、gh-pages分支或者master下面的docs文件夹。
这里使用的是gh-pages分支的方式来创建&lt;/p&gt;

&lt;h4 id=&quot;4-安装-gh-pages&quot;&gt;&lt;strong&gt;4. 安装 gh-pages&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install gh-pages --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 gh-pages 中间件，可以把 build 文件下的文件推送到 GitHub，并且创建 gh-pages branch&lt;/p&gt;

&lt;h4 id=&quot;5-修改-packagejson&quot;&gt;&lt;strong&gt;5. 修改 package.json&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;react_demo&quot;,
    &quot;version&quot;: &quot;1.1.0&quot;,
    &quot;private&quot;: true,
  + &quot;homepage&quot;: &quot;./&quot;,  // 表示你访问的页面
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;注意：homepage 不要设置成 github page上生成的那个链接路径，比如https://username.github.io/react_demo/。如果设置成上面的连接，build打的包会这所有路径前面加上react_demo。比如 index.html 文件中对同等目录下的文件引用应该是 src=’./index.css’，结果会变成src=’./react_demo/index.css’，这样部署后肯定无法访问，所有资源都找不到。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;增加npm scripts命令，推送gh-pages&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;scripts&quot;: {
        ...
  + &quot;predeploy&quot;: &quot;npm run build&quot; , // 将你的项目预编译成静态文件放在build文件夹
  + &quot;deploy&quot;: &quot;gh-pages -d build&quot;  // 是使用gh-pages 部署你的build文件夹下的内容
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意修改之后注意也 push 上去&lt;/p&gt;
&lt;h4 id=&quot;6-推送项目&quot;&gt;&lt;strong&gt;6. 推送项目&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;GitHub Pages只是部署项目，react代码直接放上去是识别不了的，所以部署的是打包编译后到代码&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Webpack 4.X打包Bootstrap4.x失败解决办法&lt;/strong&gt;&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install jquery --save // Bootstrap4.x 依赖JQuery，所以需要先安装JQuery
npm install popper.js --save // Bootstrap4.x 依赖Popper，所以需要先安装Popper
npm install bootstrap --save // 安装Bootstrap4.x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译后就可以推送了,执行上面配置的命令。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这时github上项目就多出了一个gh-pages的branch，在设置中Github Pages处选择gh-pages分支保存，部署完成。
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g8hni5w4moj30kf0gm0t6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部署时候具体执行的操作大概为：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;按照 package.json 里面增加配置代码&lt;/li&gt;
  &lt;li&gt;build 打包编译代码文件&lt;/li&gt;
  &lt;li&gt;使用 gh-pages 工具把 build 文件下的文件推送到 GitHub部署到新的gh-pages分支上&lt;/li&gt;
  &lt;li&gt;发布页面&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 30 Oct 2019 01:00:06 +0800</pubDate>
        <link>http://localhost:4000/2019/10/create-react-app%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Github-Pages/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/create-react-app%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0Github-Pages/</guid>
        
        <category>Tools</category>
        
        
      </item>
    
      <item>
        <title>TCP和UDP的简单理解</title>
        <description>&lt;h4 id=&quot;1-tcp-和-udp-的区别&quot;&gt;1. TCP 和 UDP 的区别&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TCP 是面向连接的，UDP 是面向无连接的&lt;/li&gt;
  &lt;li&gt;UDP程序结构较简单&lt;/li&gt;
  &lt;li&gt;TCP 是面向字节流的，UDP 是基于数据报的&lt;/li&gt;
  &lt;li&gt;TCP 保证数据正确性，UDP 可能丢包&lt;/li&gt;
  &lt;li&gt;TCP 保证数据顺序，UDP 不保证&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-什么是面向连接什么是面向无连接&quot;&gt;2. 什么是面向连接，什么是面向无连接?&lt;/h4&gt;

&lt;p&gt;在互通之前，面向连接的协议会先建立连接，如 TCP 有三次握手，而 UDP 不会&lt;/p&gt;

&lt;h4 id=&quot;3-tcp三次握手&quot;&gt;3. TCP三次握手?&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.客户端发起请求（寻址请求） &lt;br /&gt;
2.服务端收到请求，然后回应请求（确认请求） &lt;br /&gt;
3.客户端收到服务端的回应报文并对服务端作出回应（连接请求）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;简单理解：A代表客户端，B代表服务端
A: 你好，我是A
B: 你好，我是B
A: 你好B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;4-tcp四次挥手&quot;&gt;4. TCP四次挥手?&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1.数据验证请求码 &lt;br /&gt;
2.传输结束标记 &lt;br /&gt;
3.确认结束标记 &lt;br /&gt;
4.连接断开标记&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A：B 啊，我不想玩了
B：哦，你不想玩了啊，我知道了【 这个时候，只是 A 不想玩了，即不再发送数据，但是 B 可能还有未发送完的数据，所以需要等待 B 也主动关闭。】
B：A 啊，结束了，我也不玩了，拜拜
A：好的，拜拜
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;5-tcp-为什么是可靠连接&quot;&gt;5. TCP 为什么是可靠连接?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;通过 TCP 连接传输的数据无差错，不丢失，不重复，且按顺序到达；&lt;/li&gt;
  &lt;li&gt;TCP 报文头里面的序号能使 TCP 的数据按序到达；&lt;/li&gt;
  &lt;li&gt;报文头里面的确认序号能保证不丢包，累计确认及超时重传机制；&lt;/li&gt;
  &lt;li&gt;TCP 拥有流量控制及拥塞控制的机制；&lt;/li&gt;
  &lt;li&gt;TCP 的顺序问题，丢包问题，流量控制都是通过滑动窗口来解决的；&lt;/li&gt;
  &lt;li&gt;拥塞控制时通过拥塞窗口来解决的。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;UDP报文结构:
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g88cm2eqlvj30sw07yjr9.jpg&quot; alt=&quot;UDP报文结构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TCP报文结构:
&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g88cm20bzaj30rs0d9jri.jpg&quot; alt=&quot;TCP报文结构&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Oct 2019 01:00:06 +0800</pubDate>
        <link>http://localhost:4000/2019/10/TCP%E5%92%8CUDP%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/TCP%E5%92%8CUDP%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
        
        <category>WEB</category>
        
        
      </item>
    
      <item>
        <title>隐式类型转换的妙用</title>
        <description>&lt;h4 id=&quot;可变数组求和举例&quot;&gt;可变数组求和举例&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(...a){
var sum = 0
a.forEach((item) =&amp;gt; {
    sum += item  
})
return sum 
}
console.log(foo(1,2,3,'4',11))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Running] node &quot;Untitled-1.js&quot;
6411
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;hr /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function foo(...a){
var sum = 0
a.forEach((item) =&amp;gt; {
    sum += item * 1   // *1 隐式类型转换,把'4' 转换成4
})
return sum 
}
console.log(foo(1,2,3,'4',11))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Running] node &quot;Untitled-1.js&quot;
21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Oct 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A6%99%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%A6%99%E7%94%A8/</guid>
        
        <category>JavaScript</category>
        
        
      </item>
    
  </channel>
</rss>
